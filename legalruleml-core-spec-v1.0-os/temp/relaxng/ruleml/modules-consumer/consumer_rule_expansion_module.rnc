namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "Consumer RuleML Rules" ]
dcterms:identifier [ "http://consumer.ruleml.org/1.02/relaxng/modules/consumer_rule_expansion_module.rnc" ]
dcterms:isPartOf [ "http://consumer.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Paschkea" ]
dc:subject [ "RuleML, Consumer, Rule" ]
dcterms:description [ "The expansion module for rules in Consumer RuleML." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://consumer.ruleml.org" ]

##
start |= Rule.Node.def
Node.choice |= Rule.Node.def
edge.choice |= if_Rule.edge.def
edge.choice |= then_Rule.edge.def
Rule-node.choice |= Rule.Node.def

##
Rule.Node.def =
  
  ## <Rule>: defines a rule in Consumer RuleML. See
  ## http://consumer.ruleml.org/1.02/glossary/#gloss-Rule
  element Rule { Rule.type.def }
Rule.type.def = (Rule-datt.choice & reRule.attlist) & Rule.content
Rule-datt.choice |= direction-att-inf.choice & material-att-inf.choice
reRule.attlist &= operator-interface.attlist?
reRule.attlist &= commonNode.attlist?
Rule.content |= Rule.header, Rule.main?

##
if_Rule-edge.choice |= if_Rule.edge.def
if_Rule.edge.def =
  
  ## <if>: contains the premises of the rule. See 
  ## http://consumer.ruleml.org/1.02/glossary/#gloss-if
  element if { if_Rule.type.def }
if_Rule.type.def = if_Rule.attlist? & if_Rule.content
if_Rule.attlist &= commonInit.attlist?
if_Rule.content |= PremiseFormula.choice

##
then_Rule-edge.choice |= then_Rule.edge.def
then_Rule.edge.def =
  
  ## <then>: contains the conclusion of the rule. See 
  ## http://consumer.ruleml.org/1.02/glossary/#gloss-then
  element then { then_Rule.type.def }
then_Rule.type.def = then_Rule.attlist? & then_Rule.content
then_Rule.attlist &= commonInit.attlist?
then_Rule.content |= ConclusionFormula.choice
