namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Functional Expressions" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.02/relaxng/modules/expr_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, function, expression" ]
dcterms:description [ "The expansion module for functional expressions." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= Expr.Node.def | Fun.Node.def | op_Expr.edge.def
Node.choice |= Expr.Node.def | Fun.Node.def
edge.choice |= op_Expr.edge.def
# 
# This module declares the following RuleML elements and attributes:
#            * <Expr>
#            * <op>
#            * <Fun>

## an extension point for specializations of the expression tag name. 
Expression-node.choice |= Expr.Node.def

## A logical function of the form "f(...)" where f is a function name. 
## The function name (<Fun>) is followed by a sequence of zero or more arguments (<arg>). 
## Optional user-defined slots (<slot>) are also permitted before and/or after the arguments, just like an atom (<Atom>).	
## Rest variables (<repo> and <resl>) are also permitted.
Expr.Node.def =
  
  ## <Expr>: a functional expression. See 
  ## http://deliberation.ruleml.org/1.02/glossary/#gloss-Expr
  element Expr { Expr.type.def }
Expr.type.def = (Expr-datt.choice & reExpr.attlist), Expr.header, Expr.main
reExpr.attlist &= commonNode.attlist?

## an extension point for stripe skipping as well as specializations of the operator tag name in expressions. 
operatorForExpressions-edge.choice |= op_Expr.edge.def

## (context sensitive: see Also atom_backbone_module and holog_module)
## An operator expression including a function name (<Fun>) of a (<Expr>).
## http://deliberation.ruleml.org/1.02/glossary/#gloss-op
op_Expr.edge.def =
  
  ## Also an operator in functional expressions.
  element op { op_Expr.type.def }
op_Expr.type.def = op_Expr.attlist? & op_Expr.content
op_Expr.attlist &= commonInit.attlist?

## The operator role of an expression is filled by a functor.
op_Expr.content |= Function-node.choice

## an extension point for specializations of the function operator tag name. 
Function-node.choice |= Fun.Node.def

## A user-defined function name of an <Expr>. It is optionally surrounded by an operator (<op>).
Fun.Node.def =
  
  ## <Fun>: a type of name for functional operators. See 
  ## http://deliberation.ruleml.org/1.02/glossary/#gloss-Fun
  element Fun { Fun.type.def }
Fun.type.def = (Fun-datt.choice & reFun.attlist), Fun.value

## functors accept the resource attribute list
reFun.attlist &= Resource.attlist?
# Fun.attlist = interpretation-att.option & singlevalued-att.option & Resource.attlist?

## A functor contains the XSD datatype token.
Fun.value |= xsd:token
reFun.attlist &= commonNode.attlist?
