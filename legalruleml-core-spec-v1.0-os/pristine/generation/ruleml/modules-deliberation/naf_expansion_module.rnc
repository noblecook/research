namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Weak Negation (Negation as Failure) Formulas" ]
dcterms:identifier ["http://deliberation.ruleml.org/1.02/relaxng/modules/naf_expansion_module.rnc"]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, negation, weak, formula" ]
dcterms:description [ "The expansion module for weak negation formulas." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= Naf.Node.def | weak.edge.def
Node.choice |= Naf.Node.def
edge.choice |= weak.edge.def
# This module declares the following RuleML elements and attributes:
#            * <Naf>
#            * <weak>
# This module also declares the following RuleML choice patterns:
#            * NegationAsFailure-node.choice
#            * NafFormula.choice

## an extension point for specializations of the weak negation tag name.  
NegationAsFailure-node.choice |= Naf.Node.def
Naf.Node.def =
  # A "by default" negation of a logical atom (<Atom>) (i.e. "weak" negation or negation as failure). 
  # The negated atom may be optionally surrounded by a <weak> role.
  #        See http://deliberation.ruleml.org/1.02/glossary/#gloss-Naf
  element Naf { Naf.type.def }
Naf.type.def = (Naf-datt.choice & reNaf.attlist), Naf.header, Naf.main
# The attribute list of the weak negation element will accept a scoped closure attribute at full first-order logic.
reNaf.attlist &= commonNode.attlist?
reNaf.attlist &= closure-att-fo.choice?
reNaf.attlist &= mapClosure-att-fo.choice?

## Negation As Failure formulas accept the header patter common to truth-valued connectives.
Naf.header &= TruthValuedConnective.header?
# For the declaration of the TruthValuedConnective header, see the modules ordered_groups_expansion_module and unordered_groups_expansion_module).

## Negation As Failure formulas contain a single role.
Naf.main |= weak-edge.choice

## an extension point for stripe skipping as well as specializations of the weak tag name in weak negations. 
weak-edge.choice |= weak.edge.def
weak.edge.def =
  # A role used for negation as failure (<Naf>).
  #        See http://deliberation.ruleml.org/1.02/glossary/#gloss-weak
  element weak { weak.type.def }
weak.type.def = weak.attlist? & weak.content
weak.attlist &= commonInit.attlist?

## The negation role contains a single formula. 
weak.content |= NafFormula.choice

## formulas allowed to belong to weak negation formulas include atomic forumulas. 
NafFormula.choice |=
  SimpleFormula-node.choice
  | And-fo-node.choice
  | Or-fo-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.notallowed
  | Implication-fo-node.choice
  | Forall-fo-node.choice
  | Exists-fo-node.choice
# For the declaration of the simple formula pattern, see the atomic formula module ( atom_expansion_module) 
# For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_expansion_module)
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)
