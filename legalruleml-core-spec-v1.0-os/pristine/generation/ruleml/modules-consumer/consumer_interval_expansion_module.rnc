namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "Consumer RuleML Intervals" ]
dcterms:identifier [ "http://consumer.ruleml.org/1.02/relaxng/modules/consumer_interval_expansion_module.rnc" ]
dcterms:isPartOf [ "http://consumer.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Paschkea" ]
dc:subject [ "RuleML, Consumer, Interval" ]
dcterms:description [ "The expansion module for intervals." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://consumer.ruleml.org" ]
start |= Interval_formula.Node.def | Interval_term.Node.def
Node.choice |= Interval_formula.Node.def
Node.choice |= Interval_term.Node.def
edge.choice |= arg_interval_formula.edge.def
edge.choice |= arg_interval_term.edge.def
# This module declares the following Consumer RuleML elements:
# * Interval
#

##
Interval_term-node.choice |= Interval_term.Node.def
Interval_term.Node.def =
  
  ## <Interval>: generic Interval element. See
  ## http://consumer.ruleml.org/1.02/glossary/#gloss-Interval
  element Interval { Interval_term.type.def }
Interval_term.type.def = Interval_term.attlist & Interval_term.content
Interval_term.attlist &= type-att.choice?
Interval_term.attlist &= commonNode.attlist?
Interval_term.content |=
  Interval_term.header, (arg_interval_term-edge.choice, arg_interval_term-edge.choice?)?
Interval_term.header &= Expr.header?

##
Interval_formula-node.choice |= Interval_formula.Node.def
Interval_formula.Node.def = element Interval { Interval_formula.type.def }
Interval_formula.type.def = Interval_formula.attlist & Interval_formula.content
Interval_formula.attlist &= formula-interface.attlist?
Interval_formula.attlist &= type-att.choice?
Interval_formula.attlist &= commonNode.attlist?
Interval_formula.content |=
  Interval_formula.header, (arg_interval_formula-edge.choice, arg_interval_formula-edge.choice?)?
Interval_formula.header &= Atom.header?

##
arg_interval_term-edge.choice |= arg_interval_term.edge.def
arg_interval_term.edge.def = element arg { arg_interval_term.type.def }
arg_interval_term.type.def = index-attrib.choice & arg_interval_term.attlist & arg_interval_term.content
arg_interval_term.content |= arg.content
arg_interval_term.attlist &= commonInit.attlist?

##
arg_interval_formula-edge.choice |= arg_interval_formula.edge.def
arg_interval_formula.edge.def = element arg { arg_interval_formula.type.def }
arg_interval_formula.type.def = index-attrib.choice & arg_interval_formula.attlist & arg_interval_formula.content
arg_interval_formula.content |= arg.content
arg_interval_formula.attlist &= commonInit.attlist?

## Usage
SimpleKeyTerm.choice |= Interval_term-node.choice
Atom-node.choice |= Interval_formula-node.choice
