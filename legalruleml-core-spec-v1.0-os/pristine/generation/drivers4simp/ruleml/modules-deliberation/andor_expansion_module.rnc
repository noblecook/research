namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Conjunctions and Disjunctions" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.02/relaxng/modules/andor_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, conjunction, disjunction" ]
dcterms:description [ "The expansion module for conjunctions and disjunctions." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= And.Node.def | Or.Node.def | formula_And.edge.def | formula_Or.edge.def
Node.choice |= And.Node.def | Or.Node.def
edge.choice |= formula_And.edge.def | formula_Or.edge.def
# This module declares the following RuleML elements and attributes:
#            * <And>
#            * <Or>
#            * <formula>
# This module also declares the following RuleML choice pattern:
#            * AndFormula.choice
#            * OrFormula.choice
# 
# Schema Design Pattern Key
# .choice : choice pattern that must be defined using choice combine (|=)
# .def : definition of element or attribute using no-combine assignment (=)
# .defs : choice pattern for more than one .def pattern
# -datt.choice : choice pattern for attributes of Node elements that are given default values in the XSD
# re ... .attlist : interleave pattern for optional attributes of Node elements, must be defined using interleave combine (&=)
# .header : modifying elements that precede the main content of Node elements, defined using interleave combine
# .main : the main content of a Node element, defined using choice combine
# -node.choice : an extension point for specializations of the conjunction tag name
# -fo.choice : a pattern that is notAllowed for all languages except those with full first-order expressive power
# -edge.choice : a pattern that matches an edge (role) element, and may match the content of that element (stripe-skipping) 
# .content : content of an edge element
# Formula.choice : a choice pattern of zero to many patterns matching formulas 
# .edge.def : definition of dummy elements for workaround to bug in translation to XSD of modules with only attributes

##
And-node.choice |= And.Node.def

## A polyadic conjunctive expression, 
## Within anything other than Query...
And.Node.def =
  
  ## <And>: polyadic conjunction where <And/> is true. See
  ## http://deliberation.ruleml.org/1.02/glossary/#gloss-And
  element And { And.type.def }
And.type.def = (And-datt.choice & reAnd.attlist), And.header, And.main

## The attribute list of the conjunction element will accept a scoped closure attribute at full first-order logic.
reAnd.attlist &= commonNode.attlist?
reAnd.attlist &= closure-att-fo.choice?
reAnd.attlist &= mapClosure-att-fo.choice?

## Conjunctions accept the header patter common to truth-valued connectives.
And.header &= TruthValuedConnective.header?
# For the declaration of the TruthValuedConnective header, see the modules ordered_groups_expansion_module and unordered_groups_expansion_module).

## The main section of the conjunction content model contains zero or more formulas.
And.main |= formula_And-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in conjunctions.  
formula_And-edge.choice |= formula_And.edge.def

## The formula role of a conjunctive (<And>) expression, 
## Within And ...
formula_And.edge.def =
  
  ## <formula>: contains a single formula. See  
  ## http://deliberation.ruleml.org/1.02/glossary/#gloss-formula
  element formula { formula_And.type.def }
formula_And.type.def = formula_And-datt.choice & formula_And.attlist? & formula_And.content
formula_And-datt.choice |= index-attrib.choice
formula_And.attlist &= commonInit.attlist?

## Formulas within conjunctions consist of a single formula
formula_And.content |= AndFormula.choice

## formulas allowed to participate in conjunctions. 
AndFormula.choice |=
  SimpleFormula-node.choice
  | And-node.choice
  | Or-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.choice
  | Implication-fo-node.choice
  | Forall-fo-node.choice
  | Exists-fo-node.choice
# For the declaration of the simple formula pattern, see the atomic formula module ( atom_expansion_module) 
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the weak negation formula pattern, see the weak negation module ( naf_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)

## an extension point for specializations of the disjunction tag name.  
Or-node.choice |= Or.Node.def

## A polyadic disjunctive expression, 
Or.Node.def =
  
  ## <Or>: polyadic disjunction where <Or/> is false. See
  ## http://deliberation.ruleml.org/1.02/glossary/#gloss-Or
  element Or { Or.type.def }
Or.type.def = (Or-datt.choice & reOr.attlist), Or.header, Or.main

## The attribute list of the disjunction element will accept a (scoped) closure attribute at full first-order logic.
reOr.attlist &= commonNode.attlist?
reOr.attlist &= closure-att-fo.choice?
reOr.attlist &= mapClosure-att-fo.choice?

## Disjunctions accept the header patter common to truth-valued connectives.
Or.header &= TruthValuedConnective.header?
# For the declaration of the TruthValuedConnective header, see the modules ordered_groups_expansion_module and unordered_groups_expansion_module).

## The main section of the disjunction content model contains zero or more formulas.
Or.main |= formula_Or-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in disjunctions.  
formula_Or-edge.choice |= formula_Or.edge.def

## The formula role of a disjunctive (<Or>) expression, 
formula_Or.edge.def =
  
  ##
  element formula { formula_Or.type.def }
formula_Or.type.def = formula_Or-datt.choice & formula_Or.attlist? & formula_Or.content
formula_Or-datt.choice |= index-attrib.choice
formula_Or.attlist &= commonInit.attlist?

## Formulas within disjunctions consist of a single formula
formula_Or.content |= OrFormula.choice

## formulas allowed to participate in disjunctions. 
OrFormula.choice |=
  SimpleFormula-node.choice
  | And-node.choice
  | Or-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.choice
  | Implication-fo-node.choice
  | Forall-fo-node.choice
  | Exists-fo-node.choice
# For the declaration of the simple formula pattern, see the atomic formula and equation modules ( atom_expansion_module) 
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the weak negation formula pattern, see the weak negation module ( naf_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)
